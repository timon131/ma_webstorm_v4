include "matrixmult.circom";

/*
{
  "in_x":
  [
    [100000, 73127, 41524, 51193, 34661, 37235, 29154, 44735, 39794, 21695, 72407, 81364, 11036, 85633, 64957, 745, 52778, 79224, 23299, 43335, 89186, 18466, 98664, 95564, 1198, 43512, 13884, 60019, 25866, 21660, 76880, 88967, 1561, 36553, 81592, 98635, 57010, 23047, 77812, 17040, 94845, 29606, 12643, 11179, 75426, 12224, 85751, 27074, 75941, 5299, 62200, 97303, 31776, 15225, 13939, 20208, 20786, 12597, 7211, 89094, 24628, 87190, 61248, 15892, 64537, 19598, 70954, 89411, 42938, 99149, 73268, 14799, 31168, 39232, 1097, 24027, 81435, 65309, 54145, 61126, 35751, 38020, 69649, 94736, 23337, 82385, 96469, 71152, 44833, 80388, 25941, 27213, 16546, 80722, 4895, 5084, 67506, 2728, 58981, 31980],
    [100000, 83659, 96687, 79394, 48288, 32692, 44699, 79169, 76378, 71885, 73967, 30466, 33305, 51509, 31596, 47820, 63668, 22194, 30489, 96380, 10799, 99620, 55087, 2589, 78951, 30109, 18954, 8669, 2746, 89801, 69594, 86017, 97787, 48719, 96641, 33482, 90705, 20746, 3881, 22050, 70163, 77691, 57756, 90760, 66064, 53561, 11605, 1744, 38486, 65384, 86923, 51313, 86580, 37173, 17397, 65339, 17561, 57280, 9915, 77442, 7935, 75233, 31808, 31347, 41689, 71550, 31988, 82850, 85659, 95006, 15806, 40672, 63463, 8118, 16958, 35352, 15473, 47166, 59447, 72035, 18235, 95022, 57127, 11022, 62076, 69694, 41016, 56341, 95636, 60328, 68722, 13266, 7651, 76081, 11572, 34439, 9802, 72765, 35256, 34291],
    [100000, 36996, 35105, 74512, 33755, 41858, 24555, 59154, 73443, 55389, 77695, 36237, 79942, 22089, 25543, 46129, 28333, 78405, 45441, 86282, 10127, 81019, 78385, 92307, 14355, 97168, 21421, 62809, 19890, 2269, 16341, 64191, 52845, 27712, 68873, 88500, 65651, 5655, 16725, 46870, 85549, 7442, 62940, 20928, 55963, 8522, 69619, 29153, 34984, 67974, 73510, 50871, 19863, 10192, 36882, 15075, 95124, 96783, 23804, 82211, 13953, 76619, 209, 53466, 49025, 32667, 75089, 69244, 83569, 47875, 51440, 95717, 61538, 59047, 82768, 28948, 11003, 47248, 47102, 53838, 12072, 76504, 58594, 63912, 66673, 8050, 17757, 99044, 86837, 14504, 77420, 45800, 25548, 92685, 52018, 34905, 56964, 50214, 54199, 22885],
    [100000, 21589, 73216, 30233, 31200, 44716, 37343, 85522, 68038, 1253, 10694, 86647, 5604, 77878, 92747, 84385, 59438, 70561, 45019, 654, 61395, 2265, 41977, 86472, 84873, 3655, 81021, 45856, 50380, 58002, 12626, 95391, 92944, 31980, 93512, 85294, 71484, 17545, 83657, 84685, 62977, 16070, 96411, 34485, 64585, 13910, 30400, 7865, 11521, 43677, 36680, 96529, 13215, 5239, 7871, 9129, 59535, 65226, 15935, 44903, 2120, 39300, 13053, 49145, 69323, 80955, 56863, 85198, 32280, 25774, 8914, 36287, 86151, 95358, 26434, 69737, 6030, 23860, 99700, 4871, 35744, 20803, 15541, 75387, 40924, 27800, 62146, 78745, 8469, 31350, 2549, 46492, 26482, 58378, 71415, 83851, 4256, 20002, 92273, 16154]
  ],
  "in_x_sign":
  [
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1],
    [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]
  ],
  "in_xx_inv":
  [
    [3172, 444, 220, 55],
    [444, 3006, 179, 154],
    [220, 179, 3119, 261],
    [55, 154, 261, 3196]
  ],
  "in_xx_inv_sign":
  [
    [0, 1, 1, 1],
    [1, 0, 0, 1],
    [1, 0, 0, 0],
    [1, 1, 0, 0]
  ]
}

*/


//////////////////////////////////////////////

template Multiply_XX(k, n) {
    signal input in_x[k][n];
    signal input in_x_sign[k][n];
    signal input in_xx_inv[k][k];
    signal input in_xx_inv_sign[k][k];
    signal output out[k][k];
    signal output out_sign[k][k];

    //
    // 1. step | compute x_trans = transpose(x)
    //

    signal x_trans[n][k];
    signal x_trans_sign[n][k];

    //transpose input matrix x
    for (var j = 0; j < n; j++) {
        for (var i = 0; i < k; i++) {
            x_trans[j][i] <== in_x[i][j];
            x_trans_sign[j][i] <== in_x_sign[i][j];
        }
    }

    //
    // 2. step | multiply: XX (k x k) = X (k x n) * X_TRANS (n x k)
    //

    component xx_mult = MatrixMult(n, k, k);

    // assign inputs
    for (var j = 0; j < k; j++) {
        for (var i = 0; i < n; i++) {
            xx_mult.in_a[j][i] <== in_x[j][i];
            xx_mult.in_a_sign[j][i] <== in_x_sign[j][i];
        }
    }
    for (var j = 0; j < n; j++) {
        for (var i = 0; i < k; i++) {
            xx_mult.in_b[j][i] <== x_trans[j][i];
            xx_mult.in_b_sign[j][i] <== x_trans_sign[j][i];
        }
    }

    // get xx and assign outputs
    signal xx[k][k];
    signal xx_sign[k][k];
    for (var j = 0; j < k; j++) {
        for (var i = 0; i < k; i++) {
            xx_mult.out[j][i] ==> xx[j][i];
            xx_mult.out_sign[j][i] ==> xx_sign[j][i];
        }
    }

    //
    // 3. step | multiply: OUT (k x k) = XX (k x k) * XX_INV (k x k)
    //

    component out_mult = MatrixMult(k, k, k);

    //assign inputs
    for (var j = 0; j < k; j++) {
        for (var i = 0; i < k; i++) {
            out_mult.in_a[j][i] <== xx[j][i];
            out_mult.in_a_sign[j][i] <== xx_sign[j][i];
            out_mult.in_b[j][i] <== in_xx_inv[j][i];
            out_mult.in_b_sign[j][i] <== in_xx_inv_sign[j][i];
        }
    }

    //get outputs
    for (var j = 0; j < k; j++) {
        for (var i = 0; i < k; i++) {
            out[j][i] <== out_mult.out[j][i];
            out_sign[j][i] <== out_mult.out_sign[j][i];
        }
    }
}